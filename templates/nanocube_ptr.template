typedef struct Ptr_Type_ {
    u16 _data[3];
} Ptr_Type;

inline void Ptr_Type_reset(Ptr_Type *self, s64 offset) { 
    if (offset > 0) { 
        *((u32*) &self->_data)     = *  ( (u32*) &offset     ); 
        self->_data[2] = *( (u16*) &offset + 2 ); 
    } 
    else { 
        offset = -offset; 
        *((u32*) &self->_data)     = *  ( (u32*) &offset     ); 
        self->_data[2] = *( (u16*) &offset + 2 ) + (u16) 0x8000; 
    } 
}

inline void Ptr_Type_set_null(Ptr_Type *self) {
    *((u32*) &self->_data[0]) = 1;
    self->_data[2] = 0;
}

inline void Ptr_Type_set(Ptr_Type *self, Type* p) {
    if (p) { 
        s64 offset = (s64) ((char*) p - (char*) self);
        if (offset > 0) {
            *((u32*) &self->_data)     = *  ( (u32*) &offset     );
            self->_data[2] = *( (u16*) &offset + 2 );
        }
        else {
            offset = -offset; // if -8 it will return 7 we add one go to 8
            *((u32*) &self->_data)     = *  ( (u32*) &offset     );
            self->_data[2] = *( (u16*) &offset + 2 ) + (u16) 0x8000;
        }
    }
    else {
        Ptr_Type_set_null(self);
    }
}

inline s64 Ptr_Type_offset(Ptr_Type *self) {
    s64 offset = ((s64) *((u32*) &self->_data[0])) + (((s64) self->_data[2]) << 32);
    if (offset & 0x800000000000ll) { offset = -(offset & 0x7fffffffffffll); }
    return offset;
}

inline Type* Ptr_Type_get_not_null(Ptr_Type *self) { 
    return (Type*) ((char*) self + Ptr_Type_offset(self)); 
}

inline b8 Ptr_Type_is_not_null(Ptr_Type *self) { 
    return (*((u32*) &self->_data[0]) != 1 || self->_data[2] != 0); 
}

inline b8 Ptr_Type_is_null(Ptr_Type *self) { 
    return !Ptr_Type_is_not_null(self); 
}

inline Type* Ptr_Type_get(Ptr_Type *self) { 
    return Ptr_Type_is_not_null(self) ? Ptr_Type_get_not_null(self) : 0; 
}

inline void Ptr_Type_copy(Ptr_Type *self, Ptr_Type *other) {
    Ptr_Type_set(self, Ptr_Type_get(other));
}


